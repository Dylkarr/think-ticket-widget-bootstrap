import {
  _sfc_main,
  _sfc_main$1,
  _sfc_main$2,
  _sfc_main$3
} from "./chunk-BRVQSQRM.js";
import {
  useId
} from "./chunk-3BLMFEGL.js";
import "./chunk-URUJ4MHO.js";
import {
  get
} from "./chunk-7RVAWW2R.js";
import {
  useDefaults
} from "./chunk-WOWXAXGK.js";
import {
  Fragment,
  computed,
  createBaseVNode,
  createBlock,
  createElementBlock,
  createTextVNode,
  defineComponent,
  mergeProps,
  normalizeClass,
  openBlock,
  renderList,
  renderSlot,
  toDisplayString,
  toValue,
  unref,
  useTemplateRef,
  withCtx
} from "./chunk-UDDKWPKO.js";
import "./chunk-PZ5AY32C.js";

// node_modules/bootstrap-vue-next/dist/BForm.vue_vue_type_script_setup_true_lang-B9irEupU.mjs
var _hoisted_1 = ["id", "novalidate"];
var _sfc_main2 = defineComponent({
  __name: "BForm",
  props: {
    floating: { type: Boolean, default: false },
    id: { default: void 0 },
    novalidate: { type: Boolean, default: false },
    validated: { type: Boolean, default: false }
  },
  setup(__props, { expose: __expose }) {
    const _props = __props;
    const props = useDefaults(_props, "BForm");
    const element = useTemplateRef("_element");
    const computedClasses = computed(() => ({
      "form-floating": props.floating,
      "was-validated": props.validated
    }));
    __expose({
      element
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("form", {
        id: unref(props).id,
        ref: "_element",
        novalidate: unref(props).novalidate,
        class: normalizeClass(computedClasses.value)
      }, [
        renderSlot(_ctx.$slots, "default")
      ], 10, _hoisted_1);
    };
  }
});

// node_modules/bootstrap-vue-next/dist/useFormSelect-D2FHF0O9.mjs
var _hoisted_12 = ["value", "disabled"];
var _sfc_main3 = defineComponent({
  __name: "BFormSelectOption",
  props: {
    disabled: { type: Boolean, default: false },
    value: { default: void 0 }
  },
  setup(__props) {
    const _props = __props;
    const props = useDefaults(_props, "BFormSelectOption");
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("option", {
        value: unref(props).value,
        disabled: unref(props).disabled
      }, [
        renderSlot(_ctx.$slots, "default")
      ], 8, _hoisted_12);
    };
  }
});
var useFormSelect = (options, props) => {
  const isComplex = (option) => typeof option === "object" && option !== null && "options" in option;
  const normalizeOption = (option) => {
    const propsValue = toValue(props);
    if (typeof option === "string") {
      return { value: option, text: option };
    }
    if (typeof option === "number") {
      return { value: option, text: `${option}` };
    }
    if (option instanceof Date) {
      return { value: option, text: option.toLocaleString() };
    }
    const value = get(option, propsValue.valueField);
    const text = get(option, propsValue.textField);
    const disabled = get(option, propsValue.disabledField);
    const opts = propsValue.optionsField ? get(option, propsValue.optionsField) : void 0;
    if (opts !== void 0) {
      return {
        label: get(option, propsValue.labelField) || text,
        options: opts
      };
    }
    return {
      ...typeof option === "object" ? option : void 0,
      value,
      text,
      disabled
    };
  };
  const normalizeOptions = (opts) => opts.map((option) => normalizeOption(option));
  const normalizedOptions = computed(() => normalizeOptions(toValue(options)));
  return { normalizedOptions, isComplex };
};

// node_modules/bootstrap-vue-next/dist/BFormFloatingLabel.vue_vue_type_script_setup_true_lang-B8Wb_FR9.mjs
var _hoisted_1$1 = ["id"];
var _sfc_main$12 = defineComponent({
  __name: "BFormDatalist",
  props: {
    disabledField: { default: "disabled" },
    id: { default: void 0 },
    options: { default: () => [] },
    textField: { default: "text" },
    valueField: { default: "value" }
  },
  setup(__props) {
    const _props = __props;
    const props = useDefaults(_props, "BFormDatalist");
    const computedId = useId(() => props.id, "datalist");
    const { normalizedOptions, isComplex } = useFormSelect(
      () => props.options,
      computed(() => ({ ...props, optionsField: "options", labelField: "label" }))
    );
    const normalizedOptsWrapper = computed(
      () => (
        // Datalist doesn't support complex options
        normalizedOptions.value.filter((opt) => !isComplex(opt))
      )
    );
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("datalist", { id: unref(computedId) }, [
        renderSlot(_ctx.$slots, "first"),
        (openBlock(true), createElementBlock(Fragment, null, renderList(normalizedOptsWrapper.value, (option, index) => {
          return openBlock(), createBlock(_sfc_main3, mergeProps({
            key: index,
            ref_for: true
          }, option), {
            default: withCtx(() => [
              renderSlot(_ctx.$slots, "option", mergeProps({ ref_for: true }, option), () => [
                createTextVNode(toDisplayString(option.text), 1)
              ])
            ]),
            _: 2
          }, 1040);
        }), 128)),
        renderSlot(_ctx.$slots, "default")
      ], 8, _hoisted_1$1);
    };
  }
});
var _hoisted_13 = { class: "form-floating" };
var _hoisted_2 = ["for"];
var _sfc_main4 = defineComponent({
  __name: "BFormFloatingLabel",
  props: {
    label: { default: void 0 },
    labelFor: { default: void 0 }
  },
  setup(__props) {
    const _props = __props;
    const props = useDefaults(_props, "BFormFloatingLabel");
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", _hoisted_13, [
        renderSlot(_ctx.$slots, "default"),
        createBaseVNode("label", {
          for: unref(props).labelFor
        }, [
          renderSlot(_ctx.$slots, "label", {}, () => [
            createTextVNode(toDisplayString(unref(props).label), 1)
          ])
        ], 8, _hoisted_2)
      ]);
    };
  }
});
export {
  _sfc_main2 as BForm,
  _sfc_main$12 as BFormDatalist,
  _sfc_main4 as BFormFloatingLabel,
  _sfc_main$3 as BFormInvalidFeedback,
  _sfc_main$2 as BFormRow,
  _sfc_main$1 as BFormText,
  _sfc_main as BFormValidFeedback
};
//# sourceMappingURL=bootstrap-vue-next_components_BForm.js.map
