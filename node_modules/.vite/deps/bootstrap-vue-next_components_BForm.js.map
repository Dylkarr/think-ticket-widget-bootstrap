{
  "version": 3,
  "sources": ["../../bootstrap-vue-next/src/components/BForm/BForm.vue", "../../bootstrap-vue-next/src/components/BFormSelect/BFormSelectOption.vue", "../../bootstrap-vue-next/src/composables/useFormSelect.ts", "../../bootstrap-vue-next/src/components/BForm/BFormDatalist.vue", "../../bootstrap-vue-next/src/components/BForm/BFormFloatingLabel.vue"],
  "sourcesContent": ["<template>\n  <form :id=\"props.id\" ref=\"_element\" :novalidate=\"props.novalidate\" :class=\"computedClasses\">\n    <slot />\n  </form>\n</template>\n\n<script setup lang=\"ts\">\nimport {useDefaults} from '../../composables/useDefaults'\nimport type {BFormProps} from '../../types/ComponentProps'\nimport {computed, useTemplateRef} from 'vue'\n\nconst _props = withDefaults(defineProps<BFormProps>(), {\n  id: undefined,\n  floating: false,\n  novalidate: false,\n  validated: false,\n})\nconst props = useDefaults(_props, 'BForm')\n\nconst element = useTemplateRef<HTMLElement>('_element')\n\ndefineSlots<{\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  default?: (props: Record<string, never>) => any\n}>()\n\nconst computedClasses = computed(() => ({\n  'form-floating': props.floating,\n  'was-validated': props.validated,\n}))\n\ndefineExpose({\n  element,\n})\n</script>\n", "<template>\n  <option :value=\"props.value\" :disabled=\"props.disabled\">\n    <slot />\n  </option>\n</template>\n\n<script setup lang=\"ts\" generic=\"T\">\nimport {useDefaults} from '../../composables/useDefaults'\nimport type {BFormSelectOptionProps} from '../../types/ComponentProps'\n\nconst _props = withDefaults(defineProps<BFormSelectOptionProps<T>>(), {\n  disabled: false,\n  value: undefined,\n})\nconst props = useDefaults<BFormSelectOptionProps<T>>(_props, 'BFormSelectOption')\n\ndefineSlots<{\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  default?: (props: Record<string, never>) => any\n}>()\n</script>\n", "import {computed, type MaybeRefOrGetter, toValue} from 'vue'\nimport {get} from '../utils/object'\nimport type {ComplexSelectOptionRaw, SelectOption} from '../types/SelectTypes'\n\nexport const useFormSelect = (\n  options: MaybeRefOrGetter<ReadonlyArray<unknown>>,\n  props: MaybeRefOrGetter<Record<string, unknown>>\n) => {\n  const isComplex = (option: unknown): option is ComplexSelectOptionRaw =>\n    typeof option === 'object' && option !== null && 'options' in option\n\n  const normalizeOption = (option: unknown): ComplexSelectOptionRaw | SelectOption => {\n    const propsValue = toValue(props)\n\n    if (typeof option === 'string') {\n      return {value: option, text: option}\n    }\n    if (typeof option === 'number') {\n      return {value: option, text: `${option}`}\n    }\n    if (option instanceof Date) {\n      return {value: option, text: option.toLocaleString()}\n    }\n\n    const value: unknown = get(option, propsValue.valueField as string)\n    const text: string = get(option, propsValue.textField as string)\n    const disabled: boolean = get(option, propsValue.disabledField as string)\n\n    const opts: undefined | unknown[] = propsValue.optionsField\n      ? get(option, propsValue.optionsField as string)\n      : undefined\n\n    if (opts !== undefined) {\n      return {\n        label: get(option, propsValue.labelField as string) || text,\n        options: opts,\n      } as ComplexSelectOptionRaw\n    }\n\n    return {\n      ...(typeof option === 'object' ? option : undefined),\n      value,\n      text,\n      disabled,\n    } as SelectOption\n  }\n\n  const normalizeOptions = (\n    opts: ReadonlyArray<unknown>\n  ): (ComplexSelectOptionRaw | SelectOption)[] => opts.map((option) => normalizeOption(option))\n\n  const normalizedOptions = computed(() => normalizeOptions(toValue(options)))\n\n  return {normalizedOptions, isComplex}\n}\n", "<template>\n  <datalist :id=\"computedId\">\n    <slot name=\"first\" />\n    <BFormSelectOption\n      v-for=\"(option, index) in normalizedOptsWrapper\"\n      :key=\"index\"\n      v-bind=\"option\"\n    >\n      <slot name=\"option\" v-bind=\"option\">\n        {{ option.text }}\n      </slot>\n    </BFormSelectOption>\n    <slot />\n  </datalist>\n</template>\n\n<script setup lang=\"ts\" generic=\"T\">\nimport type {BFormDatalistProps} from '../../types/ComponentProps'\nimport {computed} from 'vue'\nimport BFormSelectOption from '../BFormSelect/BFormSelectOption.vue'\nimport {useDefaults} from '../../composables/useDefaults'\nimport {useId} from '../../composables/useId'\nimport {useFormSelect} from '../../composables/useFormSelect'\nimport type {SelectOption} from '../../types/SelectTypes'\n\nconst _props = withDefaults(defineProps<BFormDatalistProps>(), {\n  disabled: false,\n  disabledField: 'disabled',\n  id: undefined,\n  options: () => [],\n  textField: 'text',\n  valueField: 'value',\n})\nconst props = useDefaults(_props, 'BFormDatalist')\n\ndefineSlots<{\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  default?: (props: Record<string, never>) => any\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  first?: (props: Record<string, never>) => any\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  option: (props: SelectOption<T>) => any\n}>()\n\nconst computedId = useId(() => props.id, 'datalist')\n\nconst {normalizedOptions, isComplex} = useFormSelect(\n  () => props.options,\n  computed(() => ({...props, optionsField: 'options', labelField: 'label'}))\n)\n\nconst normalizedOptsWrapper = computed(\n  () =>\n    // Datalist doesn't support complex options\n    normalizedOptions.value.filter((opt) => !isComplex(opt)) as readonly SelectOption<T>[]\n)\n</script>\n", "<template>\n  <div class=\"form-floating\">\n    <slot />\n    <label :for=\"props.labelFor\">\n      <slot name=\"label\">\n        {{ props.label }}\n      </slot>\n    </label>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport {useDefaults} from '../../composables/useDefaults'\nimport type {BFormFloatingLabelProps} from '../../types/ComponentProps'\n\nconst _props = withDefaults(defineProps<BFormFloatingLabelProps>(), {\n  label: undefined,\n  labelFor: undefined,\n  text: undefined,\n})\nconst props = useDefaults(_props, 'BFormFloatingLabel')\n\ndefineSlots<{\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  default: (props: Record<string, never>) => any\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  label?: (props: Record<string, never>) => any\n}>()\n</script>\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAWA,UAAM,SAAS;AAMT,UAAA,QAAQ,YAAY,QAAQ,OAAO;AAEnC,UAAA,UAAU,eAA4B,UAAU;AAOhD,UAAA,kBAAkB,SAAS,OAAO;MACtC,iBAAiB,MAAM;MACvB,iBAAiB,MAAM;IAAA,EACvB;AAEW,aAAA;MACX;IAAA,CACD;;;;;;;;;;;;;;;;;;;;;;;ACvBD,UAAM,SAAS;AAIT,UAAA,QAAQ,YAAuC,QAAQ,mBAAmB;;;;;;;;;;;ACVnE,IAAA,gBAAgB,CAC3B,SACA,UACG;AACG,QAAA,YAAY,CAAC,WACjB,OAAO,WAAW,YAAY,WAAW,QAAQ,aAAa;AAE1D,QAAA,kBAAkB,CAAC,WAA2D;AAC5E,UAAA,aAAa,QAAQ,KAAK;AAE5B,QAAA,OAAO,WAAW,UAAU;AAC9B,aAAO,EAAC,OAAO,QAAQ,MAAM,OAAM;IAAA;AAEjC,QAAA,OAAO,WAAW,UAAU;AAC9B,aAAO,EAAC,OAAO,QAAQ,MAAM,GAAG,MAAM,GAAE;IAAA;AAE1C,QAAI,kBAAkB,MAAM;AAC1B,aAAO,EAAC,OAAO,QAAQ,MAAM,OAAO,eAAA,EAAgB;IAAA;AAGtD,UAAM,QAAiB,IAAI,QAAQ,WAAW,UAAoB;AAClE,UAAM,OAAe,IAAI,QAAQ,WAAW,SAAmB;AAC/D,UAAM,WAAoB,IAAI,QAAQ,WAAW,aAAuB;AAExE,UAAM,OAA8B,WAAW,eAC3C,IAAI,QAAQ,WAAW,YAAsB,IAC7C;AAEJ,QAAI,SAAS,QAAW;AACf,aAAA;QACL,OAAO,IAAI,QAAQ,WAAW,UAAoB,KAAK;QACvD,SAAS;MACX;IAAA;AAGK,WAAA;MACL,GAAI,OAAO,WAAW,WAAW,SAAS;MAC1C;MACA;MACA;IACF;EACF;AAEM,QAAA,mBAAmB,CACvB,SAC8C,KAAK,IAAI,CAAC,WAAW,gBAAgB,MAAM,CAAC;AAE5F,QAAM,oBAAoB,SAAS,MAAM,iBAAiB,QAAQ,OAAO,CAAC,CAAC;AAEpE,SAAA,EAAC,mBAAmB,UAAS;AACtC;;;;;;;;;;;;;;AC7BA,UAAM,SAAS;AAQT,UAAA,QAAQ,YAAY,QAAQ,eAAe;AAWjD,UAAM,aAAa,MAAM,MAAM,MAAM,IAAI,UAAU;AAE7C,UAAA,EAAC,mBAAmB,UAAA,IAAa;MACrC,MAAM,MAAM;MACZ,SAAS,OAAO,EAAC,GAAG,OAAO,cAAc,WAAW,YAAY,QAAA,EAAS;IAC3E;AAEA,UAAM,wBAAwB;MAC5B;;QAEE,kBAAkB,MAAM,OAAO,CAAC,QAAQ,CAAC,UAAU,GAAG,CAAC;;IAC3D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxCA,UAAM,SAAS;AAKT,UAAA,QAAQ,YAAY,QAAQ,oBAAoB;;;;;;;;;;;;;;;",
  "names": []
}
