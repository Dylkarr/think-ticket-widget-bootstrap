{
  "version": 3,
  "sources": ["../../bootstrap-vue-next/src/utils/constants.ts", "../../bootstrap-vue-next/src/utils/stringUtils.ts"],
  "sourcesContent": ["export const CODE_BACKSPACE = 'Backspace'\nexport const CODE_BREAK = 19\nexport const CODE_DELETE = 46\nexport const CODE_DOWN = 'ArrowDown'\nexport const CODE_END = 'End'\nexport const CODE_ENTER = 13\nexport const CODE_ESC = 27\nexport const CODE_HOME = 'Home'\nexport const CODE_LEFT = 'ArrowLeft'\nexport const CODE_PAGEDOWN = 'PageDown'\nexport const CODE_PAGEUP = 'PageUp'\nexport const CODE_RIGHT = 'ArrowRight'\nexport const CODE_SPACE = 32\nexport const CODE_UP = 'ArrowUp'\n\nexport const RX_UNDERSCORE = /_/g\nexport const RX_LOWER_UPPER = /([a-z])([A-Z])/g\nexport const RX_NUMBER = /^[0-9]*\\.?[0-9]+$/\nexport const RX_START_SPACE_WORD = /(\\s|^)(\\w)/g\nexport const RX_FIRST_START_SPACE_WORD = /(\\s|^)(\\w)/\nexport const RX_SPACE_SPLIT = /\\s+/\nexport const RX_HASH = /^#/\nexport const RX_HASH_ID = /^#[A-Za-z]+[\\w\\-:.]*$/\n\nexport const RX_STRIP_LOCALE_MODS = /-u-.+/\nexport const RX_REGEXP_REPLACE = /[-/\\\\^$*+?.()|[\\]{}]/g\nexport const RX_SPACES = /[\\s\\uFEFF\\xA0]+/g\n", "import {\n  RX_FIRST_START_SPACE_WORD,\n  RX_LOWER_UPPER,\n  RX_REGEXP_REPLACE,\n  RX_SPACES,\n  RX_START_SPACE_WORD,\n  RX_UNDERSCORE,\n} from './constants'\n\n/**\n * @param str\n * @returns\n */\nexport const startCase = (str: string): string =>\n  str\n    .replace(RX_UNDERSCORE, ' ')\n    .replace(RX_LOWER_UPPER, (_, $1, $2) => `${$1} ${$2}`)\n    .replace(RX_FIRST_START_SPACE_WORD, (_, $1, $2) => $1 + $2.toUpperCase())\n\n/**\n * @param str\n * @returns\n */\nexport const titleCase = (str: string): string =>\n  str\n    .replace(RX_UNDERSCORE, ' ')\n    .replace(RX_LOWER_UPPER, (_, $1, $2) => `${$1} ${$2}`)\n    .replace(RX_START_SPACE_WORD, (_, $1, $2) => $1 + $2.toUpperCase())\n\n/**\n * Uppercases the first letter of a string and returns a new string\n *\n * @param str\n * @returns\n */\nexport const upperFirst = (str: string): string => {\n  const trim = str.trim()\n  return trim.charAt(0).toUpperCase() + trim.slice(1)\n}\n\n/**\n * Escapes a string for RegExp usage.\n *\n * @param str\n * @returns\n */\nexport const escapeRegExp = (str: string): string => str.replace(RX_REGEXP_REPLACE, '\\\\$&')\n\n/**\n * Escapes special chars in string and replaces\n * contiguous spaces with a whitespace match\n *\n * @param str\n * @returns\n */\nexport const escapeRegExpChars = (str: string): string =>\n  escapeRegExp(str).replace(RX_SPACES, '\\\\s')\n\nexport const toPascalCase = (str: string) =>\n  str\n    // Convert kebab-case to Pascal case\n    .replace(/-./g, (match) => match.charAt(1).toUpperCase())\n    // Capitalize the first letter of each word\n    .replace(/\\b\\w/g, (match) => match.toUpperCase())\n    .replace(/\\s+/g, '') // Remove any spaces\n"],
  "mappings": ";AAeO,IAAM,gBAAgB;AACtB,IAAM,iBAAiB;AACvB,IAAM,YAAY;AAClB,IAAM,sBAAsB;AAC5B,IAAM,4BAA4B;;;ACNlC,IAAM,YAAY,CAAC,QACxB,IACG,QAAQ,eAAe,GAAG,EAC1B,QAAQ,gBAAgB,CAAC,GAAG,IAAI,OAAO,GAAG,EAAE,IAAI,EAAE,EAAE,EACpD,QAAQ,2BAA2B,CAAC,GAAG,IAAI,OAAO,KAAK,GAAG,YAAa,CAAA;AAMrE,IAAM,YAAY,CAAC,QACxB,IACG,QAAQ,eAAe,GAAG,EAC1B,QAAQ,gBAAgB,CAAC,GAAG,IAAI,OAAO,GAAG,EAAE,IAAI,EAAE,EAAE,EACpD,QAAQ,qBAAqB,CAAC,GAAG,IAAI,OAAO,KAAK,GAAG,YAAa,CAAA;AAQzD,IAAA,aAAa,CAAC,QAAwB;AAC3C,QAAA,OAAO,IAAI,KAAK;AACf,SAAA,KAAK,OAAO,CAAC,EAAE,YAAA,IAAgB,KAAK,MAAM,CAAC;AACpD;AAoBa,IAAA,eAAe,CAAC,QAC3B,IAEG,QAAQ,OAAO,CAAC,UAAU,MAAM,OAAO,CAAC,EAAE,YAAA,CAAa,EAEvD,QAAQ,SAAS,CAAC,UAAU,MAAM,YAAA,CAAa,EAC/C,QAAQ,QAAQ,EAAE;",
  "names": []
}
