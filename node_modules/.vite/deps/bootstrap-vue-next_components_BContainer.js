import {
  _sfc_main,
  getClasses
} from "./chunk-IZGS3YJP.js";
import {
  useDefaults
} from "./chunk-WOWXAXGK.js";
import {
  computed,
  createBlock,
  defineComponent,
  normalizeClass,
  openBlock,
  renderSlot,
  resolveDynamicComponent,
  toValue,
  unref,
  withCtx
} from "./chunk-UDDKWPKO.js";
import "./chunk-PZ5AY32C.js";

// node_modules/bootstrap-vue-next/dist/BContainer.vue_vue_type_script_setup_true_lang-D1yL7duP.mjs
var _sfc_main2 = defineComponent({
  __name: "BContainer",
  props: {
    fluid: { type: [Boolean, String], default: false },
    gutterX: { default: void 0 },
    gutterY: { default: void 0 },
    tag: { default: "div" }
  },
  setup(__props) {
    const _props = __props;
    const props = useDefaults(_props, "BContainer");
    const computedClasses = computed(() => ({
      container: props.fluid === false,
      [`container-fluid`]: props.fluid === true,
      [`container-${props.fluid}`]: typeof props.fluid === "string",
      [`gx-${props.gutterX}`]: props.gutterX !== void 0,
      [`gy-${props.gutterY}`]: props.gutterY !== void 0
    }));
    return (_ctx, _cache) => {
      return openBlock(), createBlock(resolveDynamicComponent(unref(props).tag), {
        class: normalizeClass(computedClasses.value)
      }, {
        default: withCtx(() => [
          renderSlot(_ctx.$slots, "default")
        ]),
        _: 3
      }, 8, ["class"]);
    };
  }
});

// node_modules/bootstrap-vue-next/dist/useAlignment-Cw-9AVid.mjs
var useAlignment = (align) => computed(() => {
  const value = toValue(align);
  return !value ? "" : `justify-content-${value}`;
});

// node_modules/bootstrap-vue-next/dist/BRow.vue_vue_type_script_setup_true_lang-B2V7AEcP.mjs
var _sfc_main3 = defineComponent({
  __name: "BRow",
  props: {
    tag: { default: "div" },
    gutterX: { default: void 0 },
    gutterY: { default: void 0 },
    noGutters: { type: Boolean, default: false },
    alignV: { default: void 0 },
    alignH: { default: void 0 },
    alignContent: { default: void 0 },
    cols: { default: void 0 },
    colsSm: { default: void 0 },
    colsMd: { default: void 0 },
    colsLg: { default: void 0 },
    colsXl: { default: void 0 },
    colsXxl: { default: void 0 }
  },
  setup(__props) {
    const _props = __props;
    const props = useDefaults(_props, "BRow");
    const alignment = useAlignment(() => props.alignH);
    const rowColsClasses = computed(
      () => getClasses(
        {
          cols: props.cols,
          colsLg: props.colsLg,
          colsMd: props.colsMd,
          colsSm: props.colsSm,
          colsXl: props.colsXl,
          colsXxl: props.colsXxl
        },
        ["cols", "colsLg", "colsMd", "colsSm", "colsXl", "colsXxl"],
        "cols",
        "row-cols"
      )
    );
    const computedClasses = computed(() => [
      rowColsClasses.value,
      {
        [`gx-${props.gutterX}`]: props.gutterX !== void 0,
        [`gy-${props.gutterY}`]: props.gutterY !== void 0,
        "g-0": props.noGutters,
        [`align-items-${props.alignV}`]: props.alignV !== void 0,
        [alignment.value]: props.alignH !== void 0,
        [`align-content-${props.alignContent}`]: props.alignContent !== void 0
      }
    ]);
    return (_ctx, _cache) => {
      return openBlock(), createBlock(resolveDynamicComponent(unref(props).tag), {
        class: normalizeClass(["row", computedClasses.value])
      }, {
        default: withCtx(() => [
          renderSlot(_ctx.$slots, "default")
        ]),
        _: 3
      }, 8, ["class"]);
    };
  }
});
export {
  _sfc_main as BCol,
  _sfc_main2 as BContainer,
  _sfc_main3 as BRow
};
//# sourceMappingURL=bootstrap-vue-next_components_BContainer.js.map
