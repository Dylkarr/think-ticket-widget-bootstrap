{
  "version": 3,
  "sources": ["../../bootstrap-vue-next/src/components/BProgress/BProgressBar.vue", "../../bootstrap-vue-next/src/components/BProgress/BProgress.vue", "../../bootstrap-vue-next/src/composables/useCountdown.ts", "../../bootstrap-vue-next/src/composables/useCountdownHover.ts", "../../bootstrap-vue-next/src/components/BAlert/BAlert.vue"],
  "sourcesContent": ["<template>\n  <div class=\"progress-bar\" :class=\"computedClasses\" :style=\"{width: computedWidth}\">\n    <slot>\n      {{ computedLabel }}\n    </slot>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport type {BProgressBarProps} from '../../types/ComponentProps'\nimport {useColorVariantClasses} from '../../composables/useColorVariantClasses'\nimport {useDefaults} from '../../composables/useDefaults'\nimport {computed, inject} from 'vue'\nimport {progressInjectionKey} from '../../utils/keys'\nimport {useToNumber} from '@vueuse/core'\n\nconst _props = withDefaults(defineProps<BProgressBarProps>(), {\n  animated: false,\n  bgVariant: null,\n  label: undefined,\n  max: undefined,\n  precision: 0,\n  showProgress: false,\n  showValue: false,\n  striped: false,\n  textVariant: null,\n  value: 0,\n  variant: null,\n})\nconst props = useDefaults(_props, 'BProgressBar')\n\ndefineSlots<{\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  default?: (props: Record<string, never>) => any\n}>()\n\nconst parentData = inject(progressInjectionKey, null)\n\nconst colorClasses = useColorVariantClasses(props)\nconst computedClasses = computed(() => [\n  colorClasses.value,\n  {\n    'progress-bar-animated': props.animated || parentData?.animated.value,\n    'progress-bar-striped':\n      props.striped || parentData?.striped.value || props.animated || parentData?.animated.value,\n  },\n])\n\nconst numberPrecision = useToNumber(() => props.precision)\nconst numberValue = useToNumber(() => props.value)\nconst numberMax = useToNumber(() => props.max ?? NaN)\nconst parentMaxNumber = useToNumber(() => parentData?.max.value ?? NaN)\n\nconst computedLabel = computed(() =>\n  props.showValue || parentData?.showValue.value\n    ? numberValue.value.toFixed(numberPrecision.value)\n    : props.showProgress || parentData?.showProgress.value\n      ? ((numberValue.value * 100) / (numberMax.value || 100)).toFixed(numberPrecision.value)\n      : props.label !== undefined\n        ? props.label\n        : ''\n)\n\nconst computedWidth = computed(() =>\n  parentMaxNumber.value\n    ? `${(numberValue.value * 100) / parentMaxNumber.value}%`\n    : numberMax.value\n      ? `${(numberValue.value * 100) / numberMax.value}%`\n      : typeof props.value === 'string'\n        ? props.value\n        : `${props.value}%`\n)\n</script>\n", "<template>\n  <div\n    class=\"progress\"\n    role=\"progressbar\"\n    :style=\"{height: props.height}\"\n    :aria-valuenow=\"props.value\"\n    aria-valuemin=\"0\"\n    :aria-valuemax=\"props.max\"\n  >\n    <slot>\n      <BProgressBar\n        :animated=\"props.animated\"\n        :max=\"props.max\"\n        :precision=\"props.precision\"\n        :show-progress=\"props.showProgress\"\n        :show-value=\"props.showValue\"\n        :striped=\"props.striped\"\n        :value=\"props.value\"\n        :variant=\"props.variant\"\n        :text-variant=\"props.textVariant\"\n        :bg-variant=\"props.bgVariant\"\n      />\n    </slot>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport BProgressBar from './BProgressBar.vue'\nimport type {BProgressProps} from '../../types/ComponentProps'\nimport {provide, toRef} from 'vue'\nimport {progressInjectionKey} from '../../utils/keys'\nimport {useDefaults} from '../../composables/useDefaults'\n\nconst _props = withDefaults(defineProps<BProgressProps>(), {\n  height: undefined,\n  // BProgressBar props\n  animated: undefined,\n  bgVariant: undefined,\n  max: 100,\n  precision: undefined,\n  showProgress: undefined,\n  showValue: undefined,\n  striped: undefined,\n  textVariant: undefined,\n  value: undefined,\n  variant: undefined,\n  // End BProgressBar props\n})\nconst props = useDefaults(_props, 'BProgress')\n\ndefineSlots<{\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  default?: (props: Record<string, never>) => any\n}>()\n\nprovide(progressInjectionKey, {\n  animated: toRef(() => props.animated),\n  max: toRef(() => props.max),\n  showProgress: toRef(() => props.showProgress),\n  showValue: toRef(() => props.showValue),\n  striped: toRef(() => props.striped),\n})\n</script>\n", "import {useTimestamp, type UseTimestampOptions} from '@vueuse/core'\nimport {computed, type MaybeRefOrGetter, readonly, ref, toRef, watch} from 'vue'\n\n/**\n * A simple interval timer that counts down the remaining seconds\n *\n * @param {MaybeRefOrGetter<number>} length the total amount of time to loop through in ms\n * @param {MaybeRefOrGetter<number>} interval how often the interval should refresh. Default 1000\n * @param {Readonly<UseIntervalFnOptions>} intervalOpts opts to pass to the interval fn. Default {}\n */\nexport const useCountdown = (\n  length: MaybeRefOrGetter<number>,\n  interval: number | 'requestAnimationFrame',\n  timestampOpts: UseTimestampOptions<true> = {}\n) => {\n  const resolvedLength = readonly(toRef(length))\n\n  const isPaused = ref(false)\n\n  const target = ref(Date.now() + resolvedLength.value)\n\n  const {isActive, pause, resume, timestamp} = useTimestamp({\n    interval,\n    controls: true,\n    callback: (v) => {\n      if (v >= target.value) {\n        isPaused.value = false\n        pause()\n      }\n    },\n    ...timestampOpts,\n  })\n\n  const value = computed(() => target.value - timestamp.value)\n\n  const restart = () => {\n    target.value = Date.now() + resolvedLength.value\n    resume()\n  }\n  watch(resolvedLength, () => {\n    if (resolvedLength.value > 0) {\n      restart()\n    }\n  })\n\n  const myPause = () => {\n    isPaused.value = true\n    pause()\n  }\n  const myResume = () => {\n    isPaused.value = false\n    const remainingTime = target.value - timestamp.value\n    target.value = Date.now() + remainingTime\n    resume()\n  }\n  const stop = () => {\n    pause()\n    timestamp.value = target.value\n    isPaused.value = false\n  }\n\n  return {\n    isActive: readonly(isActive),\n    isPaused: readonly(isPaused),\n    stop,\n    pause: myPause,\n    resume: myResume,\n    restart,\n    value,\n  }\n}\n", "import {useElementHover} from '@vueuse/core'\nimport {type MaybeRefOrGetter, type Ref, toValue, watch} from 'vue'\n\nexport const useCountdownHover = (\n  element: Ref<HTMLElement | null>,\n  {\n    modelValueIgnoresHover,\n    noHoverPause,\n    noResumeOnHoverLeave,\n  }: {\n    noHoverPause?: MaybeRefOrGetter<boolean>\n    noResumeOnHoverLeave?: MaybeRefOrGetter<boolean>\n    /**\n     * Countdown/hover rules don't apply to static model-values (boolean)\n     */\n    modelValueIgnoresHover?: MaybeRefOrGetter<boolean>\n  },\n  actions: {\n    pause: () => void\n    resume: () => void\n  }\n) => {\n  const isHovering = useElementHover(element)\n\n  const onMouseEnter = () => {\n    if (toValue(noHoverPause)) return\n    actions.pause()\n  }\n  const onMouseLeave = () => {\n    if (toValue(noResumeOnHoverLeave)) return\n    actions.resume()\n  }\n\n  watch(isHovering, (newValue) => {\n    if (toValue(modelValueIgnoresHover)) return\n    if (newValue) {\n      onMouseEnter()\n      return\n    }\n    onMouseLeave()\n  })\n\n  return {\n    isHovering,\n  }\n}\n", "<template>\n  <Transition\n    v-if=\"renderRef || contentShowing\"\n    v-bind=\"transitionProps\"\n    :appear=\"!!modelValue || props.visible\"\n  >\n    <div\n      v-show=\"isAlertVisible\"\n      :id=\"props.id\"\n      ref=\"_element\"\n      class=\"alert\"\n      :class=\"[props.alertClass, computedClasses]\"\n      tabindex=\"0\"\n      :role=\"!isAlertVisible ? undefined : props.isStatus ? 'status' : 'alert'\"\n      :aria-live=\"!isAlertVisible ? undefined : props.isStatus ? 'polite' : 'assertive'\"\n      :aria-atomic=\"!isAlertVisible ? undefined : true\"\n    >\n      <component\n        :is=\"props.headerTag\"\n        v-if=\"contentShowing && (slots.title || props.title)\"\n        class=\"alert-heading d-flex gap-2\"\n        :class=\"props.headerClass\"\n      >\n        <slot name=\"title\" v-bind=\"sharedSlots\">\n          <span>\n            {{ props.title }}\n          </span>\n        </slot>\n        <template v-if=\"props.dismissible\">\n          <BButton\n            v-if=\"slots.close || props.closeContent\"\n            :class=\"[props.closeClass]\"\n            class=\"ms-auto ps-1 btn-close-custom\"\n            :variant=\"props.closeVariant\"\n            @click.stop.prevent=\"hide('close')\"\n          >\n            <slot name=\"close\" v-bind=\"sharedSlots\">\n              {{ props.closeContent }}\n            </slot>\n          </BButton>\n          <BCloseButton\n            v-else\n            :aria-label=\"props.closeLabel\"\n            :class=\"[props.closeClass]\"\n            @click.stop.prevent=\"hide('close')\"\n          />\n        </template>\n      </component>\n      <template v-if=\"contentShowing && (slots.default || props.body)\">\n        <div class=\"d-flex gap-2\">\n          <component\n            :is=\"computedTag\"\n            class=\"alert-body\"\n            :class=\"props.bodyClass\"\n            v-bind=\"computedLinkProps\"\n            @click=\"computedLink && props.dismissible ? hide() : () => {}\"\n          >\n            <slot v-bind=\"sharedSlots\">\n              {{ props.body }}\n            </slot>\n          </component>\n\n          <template v-if=\"props.dismissible && !(slots.title || props.title)\">\n            <BButton\n              v-if=\"slots.close || props.closeContent\"\n              :class=\"[props.closeClass]\"\n              class=\"ms-auto btn-close-custom\"\n              :variant=\"props.closeVariant\"\n              @click.stop.prevent=\"hide('close')\"\n            >\n              <slot name=\"close\" v-bind=\"sharedSlots\">\n                {{ props.closeContent }}\n              </slot>\n            </BButton>\n            <BCloseButton\n              v-else\n              :aria-label=\"props.closeLabel\"\n              :class=\"[props.closeClass]\"\n              @click.stop.prevent=\"hide('close')\"\n            />\n          </template>\n        </div>\n      </template>\n      <BProgress\n        v-if=\"typeof modelValue === 'number' && props.progressProps !== undefined\"\n        :animated=\"props.progressProps.animated\"\n        :precision=\"props.progressProps.precision\"\n        :show-progress=\"props.progressProps.showProgress\"\n        :show-value=\"props.progressProps.showValue\"\n        :striped=\"props.progressProps.striped\"\n        :variant=\"props.progressProps.variant\"\n        :max=\"modelValue\"\n        :value=\"remainingMs\"\n        height=\"4px\"\n      />\n    </div>\n  </Transition>\n</template>\n\n<script setup lang=\"ts\">\nimport {computed, type EmitFn, useTemplateRef, watch, watchEffect} from 'vue'\nimport {useBLinkHelper} from '../../composables/useBLinkHelper'\nimport type {BAlertProps} from '../../types/ComponentProps'\nimport type {BToastEmits} from '../../types/ComponentEmits'\nimport type {BToastSlots, ShowHideSlotsData} from '../../types/ComponentSlots'\nimport BCloseButton from '../BButton/BCloseButton.vue'\nimport BLink from '../BLink/BLink.vue'\nimport BProgress from '../BProgress/BProgress.vue'\nimport {useCountdown} from '../../composables/useCountdown'\nimport {useDefaults} from '../../composables/useDefaults'\nimport {useCountdownHover} from '../../composables/useCountdownHover'\nimport {useId} from '../../composables/useId'\nimport {useShowHide} from '../../composables/useShowHide'\n\nconst _props = withDefaults(defineProps<Omit<BAlertProps, 'modelValue'>>(), {\n  bgVariant: null,\n  body: undefined,\n  bodyClass: undefined,\n  closeClass: undefined,\n  closeContent: undefined,\n  closeLabel: 'Close',\n  closeVariant: 'secondary',\n  dismissible: false,\n  headerClass: undefined,\n  headerTag: 'div',\n  id: undefined,\n  initialAnimation: false,\n  interval: 'requestAnimationFrame',\n  isStatus: false,\n  lazy: false,\n  noFade: false,\n  noHoverPause: false,\n  noResumeOnHoverLeave: false,\n  progressProps: undefined,\n  unmountLazy: false,\n  showOnPause: true,\n  show: false,\n  solid: false,\n  textVariant: null,\n  title: undefined,\n  alertClass: undefined,\n  transProps: undefined,\n  visible: false,\n  // Link props\n  // All others use defaults\n  noRel: undefined,\n  active: undefined,\n  activeClass: undefined,\n  disabled: undefined,\n  exactActiveClass: undefined,\n  href: undefined,\n  icon: undefined,\n  opacity: undefined,\n  opacityHover: undefined,\n  stretched: false,\n  rel: undefined,\n  replace: undefined,\n  routerComponentName: undefined,\n  target: undefined,\n  to: undefined,\n  underlineOffset: undefined,\n  underlineOffsetHover: undefined,\n  underlineOpacity: undefined,\n  underlineOpacityHover: undefined,\n  underlineVariant: undefined,\n  // End link props\n  variant: 'info',\n})\nconst props = useDefaults(_props, 'BAlert')\n\nconst emit = defineEmits<BToastEmits>()\n\nconst slots = defineSlots<BToastSlots>()\n\nconst element = useTemplateRef<HTMLElement>('_element')\n\nconst modelValue = defineModel<Exclude<BAlertProps['modelValue'], undefined>>({default: false})\nconst {computedLink, computedLinkProps} = useBLinkHelper(props)\n\nconst computedId = useId(() => props.id, 'alert')\n\nconst {\n  showRef,\n  renderRef,\n  hide,\n  toggle,\n  show,\n  buildTriggerableEvent,\n  computedNoAnimation,\n  isVisible,\n  transitionProps,\n  contentShowing,\n} = useShowHide(modelValue, props, emit as EmitFn, element, computedId)\n\n// TODO solid is never used\nconst countdownLength = computed(() =>\n  typeof modelValue.value === 'boolean' ? 0 : modelValue.value\n)\n\nconst {\n  isActive,\n  pause,\n  restart,\n  resume,\n  stop,\n  isPaused,\n  value: remainingMs,\n} = useCountdown(countdownLength, props.interval, {\n  immediate: typeof modelValue.value === 'number' && !!modelValue.value,\n})\nuseCountdownHover(\n  element,\n  {\n    noHoverPause: () => props.noHoverPause || typeof modelValue.value !== 'number',\n    noResumeOnHoverLeave: () => props.noResumeOnHoverLeave || typeof modelValue.value !== 'number',\n    modelValueIgnoresHover: () => typeof modelValue.value === 'boolean',\n  },\n  {pause, resume}\n)\n\nwatchEffect(() => {\n  emit('close-countdown', remainingMs.value)\n})\n\nconst computedTag = computed(() => (computedLink.value ? BLink : 'div'))\n\nconst isAlertVisible = computed(\n  () => showRef.value || isActive.value || (props.showOnPause && isPaused.value)\n)\n\n// const colorClasses = useColorVariantClasses(props)\nconst computedClasses = computed(() => [\n  // colorClasses.value,\n  {\n    [`alert-${props.variant}`]: props.variant !== null,\n    'alert-dismissible': props.dismissible && !(slots.close || props.closeContent),\n    'show': isVisible.value,\n    'fade': !computedNoAnimation.value,\n  },\n])\n\nwatch(modelValue, (newValue) => {\n  if (typeof newValue === 'number') {\n    const event = buildTriggerableEvent('show', {cancelable: true, trigger: 'model'})\n    emit('show', event)\n    if (event.defaultPrevented) {\n      emit('show-prevented', buildTriggerableEvent('show-prevented'))\n    } else {\n      restart()\n    }\n  }\n})\n\n// isActive in the composable will cause the alert to hide when the countdown is done\nwatch(isActive, (newValue) => {\n  if (newValue === false && isPaused.value === false) {\n    hide()\n    modelValue.value = 0\n    stop()\n  }\n})\nconst sharedSlots = computed<ShowHideSlotsData>(() => ({\n  toggle,\n  show,\n  hide,\n  id: computedId.value,\n  visible: showRef.value,\n  active: isActive.value,\n}))\n\ndefineExpose({\n  show,\n  hide,\n  toggle,\n  pause,\n  restart,\n  resume,\n  stop,\n})\n</script>\n"],
  "mappings": "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",
  "names": ["_useSlots", "_useModel", "BLink"]
}
