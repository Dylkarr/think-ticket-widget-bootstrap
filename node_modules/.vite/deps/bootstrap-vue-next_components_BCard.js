import {
  isEmptySlot
} from "./chunk-IFOGW6EP.js";
import {
  createReusableTemplate
} from "./chunk-NRQLM6AD.js";
import {
  useToNumber
} from "./chunk-NZWXQ6LM.js";
import {
  useColorVariantClasses
} from "./chunk-URUJ4MHO.js";
import {
  omit
} from "./chunk-7RVAWW2R.js";
import {
  useDefaults
} from "./chunk-WOWXAXGK.js";
import {
  computed,
  createBlock,
  createCommentVNode,
  createTextVNode,
  createVNode,
  defineComponent,
  mergeProps,
  normalizeClass,
  normalizeProps,
  openBlock,
  renderSlot,
  resolveDynamicComponent,
  toDisplayString,
  toValue,
  unref,
  useSlots,
  withCtx
} from "./chunk-UDDKWPKO.js";
import "./chunk-PZ5AY32C.js";

// node_modules/bootstrap-vue-next/dist/useRadiusElementClasses-DtKYQuWz.mjs
var useRadiusElementClasses = (obj) => {
  const resolveRadiusElement = (value, str) => {
    const strValue = str === null ? "" : `-${str}`;
    return value === "circle" ? `rounded${strValue}-circle` : value === "pill" ? `rounded${strValue}-pill` : typeof value === "number" || value === "0" || value === "1" || value === "2" || value === "3" || value === "4" || value === "5" ? `rounded${strValue}-${value}` : value === "none" ? `rounded${strValue}-0` : value === "sm" ? `rounded${strValue}-1` : value === "lg" ? `rounded${strValue}-5` : `rounded${strValue}`;
  };
  return computed(() => {
    const props = toValue(obj);
    return {
      [`${resolveRadiusElement(props.rounded, null)}`]: !!props.rounded,
      [`${resolveRadiusElement(props.roundedTop, "top")}`]: !!props.roundedTop,
      [`${resolveRadiusElement(props.roundedBottom, "bottom")}`]: !!props.roundedBottom,
      [`${resolveRadiusElement(props.roundedStart, "start")}`]: !!props.roundedStart,
      [`${resolveRadiusElement(props.roundedEnd, "end")}`]: !!props.roundedEnd
    };
  });
};

// node_modules/bootstrap-vue-next/dist/BImg.vue_vue_type_script_setup_true_lang-BAusIjYG.mjs
var _sfc_main = defineComponent({
  __name: "BImg",
  props: {
    blank: { type: Boolean, default: false },
    blankColor: { default: "transparent" },
    block: { type: Boolean, default: false },
    fluid: { type: Boolean, default: false },
    fluidGrow: { type: Boolean, default: false },
    height: { default: void 0 },
    tag: { default: "img" },
    lazy: { type: Boolean, default: false },
    sizes: { default: void 0 },
    src: { default: void 0 },
    srcset: { default: void 0 },
    thumbnail: { type: Boolean, default: false },
    width: { default: void 0 },
    placement: { default: void 0 },
    rounded: { type: [Boolean, String, Number], default: false },
    roundedTop: { type: [Boolean, String, Number], default: void 0 },
    roundedBottom: { type: [Boolean, String, Number], default: void 0 },
    roundedStart: { type: [Boolean, String, Number], default: void 0 },
    roundedEnd: { type: [Boolean, String, Number], default: void 0 }
  },
  setup(__props) {
    const _props = __props;
    const props = useDefaults(_props, "BImg");
    const heightNumber = useToNumber(() => props.height ?? NaN);
    const widthNumber = useToNumber(() => props.width ?? NaN);
    const radiusElementClasses = useRadiusElementClasses(() => ({
      rounded: props.rounded,
      roundedTop: props.roundedTop,
      roundedBottom: props.roundedBottom,
      roundedStart: props.roundedStart,
      roundedEnd: props.roundedEnd
    }));
    const computedSrcset = computed(
      () => typeof props.srcset === "string" ? props.srcset.split(",").filter((x) => x).join(",") : Array.isArray(props.srcset) ? props.srcset.filter((x) => x).join(",") : void 0
    );
    const computedSizes = computed(
      () => typeof props.sizes === "string" ? props.sizes.split(",").filter((x) => x).join(",") : Array.isArray(props.sizes) ? props.sizes.filter((x) => x).join(",") : void 0
    );
    const computedDimentions = computed(() => {
      const width = Number.isNaN(widthNumber.value) ? void 0 : widthNumber.value;
      const height = Number.isNaN(heightNumber.value) ? void 0 : heightNumber.value;
      if (props.blank) {
        if (width !== void 0 && height === void 0) return { height: width, width };
        if (width === void 0 && height !== void 0) return { height, width: height };
        if (width === void 0 && height === void 0) return { height: 1, width: 1 };
      }
      return {
        width,
        height
      };
    });
    const computedBlankImgSrc = computed(
      () => makeBlankImgSrc(computedDimentions.value.width, computedDimentions.value.height, props.blankColor)
    );
    const computedAlignment = computed(() => ({
      "float-start": props.placement === "start",
      "float-end": props.placement === "end",
      "mx-auto": props.placement === "center"
    }));
    const computedClasses = computed(() => [
      radiusElementClasses.value,
      computedAlignment.value,
      {
        "img-thumbnail": props.thumbnail,
        "img-fluid": props.fluid || props.fluidGrow,
        "w-100": props.fluidGrow,
        "d-block": props.block || props.placement === "center"
      }
    ]);
    const makeBlankImgSrc = (width, height, color) => `data:image/svg+xml;charset=UTF-8,${encodeURIComponent(`<svg width="${width}" height="${height}" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 ${width} ${height}" preserveAspectRatio="none">
    <rect width="100%" height="100%" style="fill:${color};"></rect>
    </svg>`)}`;
    return (_ctx, _cache) => {
      return openBlock(), createBlock(resolveDynamicComponent(unref(props).tag), {
        class: normalizeClass([computedClasses.value, "b-img"]),
        src: !unref(props).blank ? unref(props).src : computedBlankImgSrc.value,
        width: computedDimentions.value.width || void 0,
        height: computedDimentions.value.height || void 0,
        srcset: !unref(props).blank ? computedSrcset.value : void 0,
        sizes: !unref(props).blank ? computedSizes.value : void 0,
        loading: unref(props).lazy ? "lazy" : "eager"
      }, null, 8, ["class", "src", "width", "height", "srcset", "sizes", "loading"]);
    };
  }
});

// node_modules/bootstrap-vue-next/dist/BCard.vue_vue_type_script_setup_true_lang-B87L_9wi.mjs
var _sfc_main$7 = defineComponent({
  __name: "BCardImg",
  props: {
    placement: { default: "top" },
    blank: { type: Boolean, default: void 0 },
    blankColor: { default: void 0 },
    block: { type: Boolean, default: void 0 },
    fluid: { type: Boolean, default: void 0 },
    fluidGrow: { type: Boolean, default: void 0 },
    height: { default: void 0 },
    tag: {},
    lazy: { type: Boolean, default: void 0 },
    sizes: { default: void 0 },
    src: { default: void 0 },
    srcset: { default: void 0 },
    thumbnail: { type: Boolean, default: void 0 },
    width: { default: void 0 },
    rounded: { type: [Boolean, String, Number], default: void 0 },
    roundedTop: { type: [Boolean, String, Number], default: void 0 },
    roundedBottom: { type: [Boolean, String, Number], default: void 0 },
    roundedStart: { type: [Boolean, String, Number], default: void 0 },
    roundedEnd: { type: [Boolean, String, Number], default: void 0 }
  },
  setup(__props) {
    const _props = __props;
    const props = useDefaults(_props, "BCardImg");
    const baseAlignmentClasses = computed(() => ({
      "card-img-top": props.placement === "top",
      // TODO implement this class
      "card-img-end": props.placement === "end",
      "card-img-bottom": props.placement === "bottom",
      // TODO implement this class
      "card-img-start": props.placement === "start",
      "card-img": props.placement === "overlay"
    }));
    const computedImgProps = computed(() => omit(props, ["placement"]));
    return (_ctx, _cache) => {
      return openBlock(), createBlock(_sfc_main, mergeProps(computedImgProps.value, { class: baseAlignmentClasses.value }), null, 16, ["class"]);
    };
  }
});
var _sfc_main$6 = defineComponent({
  __name: "BCardHeadFoot",
  props: {
    borderVariant: { default: null },
    tag: { default: "div" },
    text: { default: void 0 },
    variant: { default: null },
    bgVariant: { default: null },
    textVariant: { default: null }
  },
  setup(__props) {
    const props = __props;
    const computedClasses = useColorVariantClasses(props);
    return (_ctx, _cache) => {
      return openBlock(), createBlock(resolveDynamicComponent(_ctx.tag), {
        class: normalizeClass(unref(computedClasses))
      }, {
        default: withCtx(() => [
          renderSlot(_ctx.$slots, "default", {}, () => [
            createTextVNode(toDisplayString(_ctx.text), 1)
          ])
        ]),
        _: 3
      }, 8, ["class"]);
    };
  }
});
var _sfc_main$5 = defineComponent({
  __name: "BCardHeader",
  props: {
    borderVariant: { default: void 0 },
    tag: { default: "div" },
    text: { default: void 0 },
    variant: { default: void 0 },
    bgVariant: { default: void 0 },
    textVariant: { default: void 0 }
  },
  setup(__props) {
    const _props = __props;
    const props = useDefaults(_props, "BCardHeader");
    return (_ctx, _cache) => {
      return openBlock(), createBlock(_sfc_main$6, mergeProps({ class: "card-header" }, unref(props)), {
        default: withCtx(() => [
          renderSlot(_ctx.$slots, "default")
        ]),
        _: 3
      }, 16);
    };
  }
});
var _sfc_main$4 = defineComponent({
  __name: "BCardTitle",
  props: {
    tag: { default: "h4" },
    text: { default: void 0 }
  },
  setup(__props) {
    const _props = __props;
    const props = useDefaults(_props, "BCardTitle");
    return (_ctx, _cache) => {
      return openBlock(), createBlock(resolveDynamicComponent(unref(props).tag), { class: "card-title" }, {
        default: withCtx(() => [
          renderSlot(_ctx.$slots, "default", {}, () => [
            createTextVNode(toDisplayString(unref(props).text), 1)
          ])
        ]),
        _: 3
      });
    };
  }
});
var _sfc_main$3 = defineComponent({
  __name: "BCardSubtitle",
  props: {
    text: { default: void 0 },
    tag: { default: "h6" },
    textVariant: { default: "body-secondary" }
  },
  setup(__props) {
    const _props = __props;
    const props = useDefaults(_props, "BCardSubtitle");
    const computedClasses = useColorVariantClasses(props);
    return (_ctx, _cache) => {
      return openBlock(), createBlock(resolveDynamicComponent(unref(props).tag), {
        class: normalizeClass(["card-subtitle mb-2", unref(computedClasses)])
      }, {
        default: withCtx(() => [
          renderSlot(_ctx.$slots, "default", {}, () => [
            createTextVNode(toDisplayString(unref(props).text), 1)
          ])
        ]),
        _: 3
      }, 8, ["class"]);
    };
  }
});
var _sfc_main$2 = defineComponent({
  __name: "BCardBody",
  props: {
    overlay: { type: Boolean, default: false },
    subtitle: { default: void 0 },
    subtitleTag: { default: "h4" },
    subtitleTextVariant: { default: void 0 },
    tag: { default: "div" },
    text: { default: void 0 },
    title: { default: void 0 },
    titleTag: { default: "h4" },
    variant: { default: null },
    bgVariant: { default: null },
    textVariant: { default: null }
  },
  setup(__props) {
    const _props = __props;
    const props = useDefaults(_props, "BCardBody");
    const slots = useSlots();
    const hasTitleSlot = computed(() => !isEmptySlot(slots.title));
    const hasSubtitleSlot = computed(() => !isEmptySlot(slots.subtitle));
    const colorClasses = useColorVariantClasses(props);
    const computedClasses = computed(() => [
      colorClasses.value,
      props.overlay ? "card-img-overlay" : "card-body"
    ]);
    return (_ctx, _cache) => {
      return openBlock(), createBlock(resolveDynamicComponent(unref(props).tag), {
        class: normalizeClass(computedClasses.value)
      }, {
        default: withCtx(() => [
          !!unref(props).title || hasTitleSlot.value ? (openBlock(), createBlock(_sfc_main$4, {
            key: 0,
            tag: unref(props).titleTag
          }, {
            default: withCtx(() => [
              renderSlot(_ctx.$slots, "title", {}, () => [
                createTextVNode(toDisplayString(unref(props).title), 1)
              ])
            ]),
            _: 3
          }, 8, ["tag"])) : createCommentVNode("", true),
          !!unref(props).subtitle || hasSubtitleSlot.value ? (openBlock(), createBlock(_sfc_main$3, {
            key: 1,
            tag: unref(props).subtitleTag,
            "text-variant": unref(props).subtitleTextVariant
          }, {
            default: withCtx(() => [
              renderSlot(_ctx.$slots, "subtitle", {}, () => [
                createTextVNode(toDisplayString(unref(props).subtitle), 1)
              ])
            ]),
            _: 3
          }, 8, ["tag", "text-variant"])) : createCommentVNode("", true),
          renderSlot(_ctx.$slots, "default", {}, () => [
            createTextVNode(toDisplayString(unref(props).text), 1)
          ])
        ]),
        _: 3
      }, 8, ["class"]);
    };
  }
});
var _sfc_main$1 = defineComponent({
  __name: "BCardFooter",
  props: {
    borderVariant: { default: void 0 },
    tag: { default: "div" },
    text: { default: void 0 },
    variant: { default: void 0 },
    bgVariant: { default: void 0 },
    textVariant: { default: void 0 }
  },
  setup(__props) {
    const _props = __props;
    const props = useDefaults(_props, "BCardFooter");
    return (_ctx, _cache) => {
      return openBlock(), createBlock(_sfc_main$6, mergeProps({ class: "card-footer" }, unref(props)), {
        default: withCtx(() => [
          renderSlot(_ctx.$slots, "default", {}, () => [
            createTextVNode(toDisplayString(unref(props).text), 1)
          ])
        ]),
        _: 3
      }, 16);
    };
  }
});
var _sfc_main2 = defineComponent({
  __name: "BCard",
  props: {
    align: { default: void 0 },
    bodyBgVariant: { default: void 0 },
    bodyClass: { default: void 0 },
    bodyTag: { default: "div" },
    bodyText: { default: "" },
    bodyTextVariant: { default: void 0 },
    borderVariant: { default: null },
    footer: { default: void 0 },
    footerBgVariant: { default: void 0 },
    footerBorderVariant: { default: void 0 },
    footerClass: { default: void 0 },
    footerTag: { default: "div" },
    footerTextVariant: { default: void 0 },
    footerVariant: { default: null },
    header: { default: void 0 },
    headerBgVariant: { default: void 0 },
    headerBorderVariant: { default: void 0 },
    headerClass: { default: void 0 },
    headerTag: { default: "div" },
    headerTextVariant: { default: void 0 },
    headerVariant: { default: null },
    imgAlt: { default: void 0 },
    imgPlacement: { default: "top" },
    imgHeight: { default: void 0 },
    imgSrc: { default: void 0 },
    imgWidth: { default: void 0 },
    noBody: { type: Boolean, default: false },
    subtitle: { default: void 0 },
    subtitleTag: { default: "h6" },
    subtitleTextVariant: { default: "body-secondary" },
    tag: { default: "div" },
    title: { default: void 0 },
    titleTag: { default: "h4" },
    variant: { default: null },
    bgVariant: { default: null },
    textVariant: { default: null }
  },
  setup(__props) {
    const _props = __props;
    const props = useDefaults(_props, "BCard");
    const slots = useSlots();
    const hasHeaderSlot = computed(() => !isEmptySlot(slots.header));
    const hasFooterSlot = computed(() => !isEmptySlot(slots.footer));
    const colorClasses = useColorVariantClasses(props);
    const computedClasses = computed(() => [
      colorClasses.value,
      {
        [`text-${props.align}`]: props.align !== void 0,
        "flex-row": props.imgPlacement === "start",
        "flex-row-reverse": props.imgPlacement === "end"
      }
    ]);
    const imgAttr = computed(() => ({
      src: props.imgSrc,
      alt: props.imgAlt,
      height: props.imgHeight,
      width: props.imgWidth,
      placement: props.imgPlacement
    }));
    const ReusableImg = createReusableTemplate();
    return (_ctx, _cache) => {
      return openBlock(), createBlock(resolveDynamicComponent(unref(props).tag), {
        class: normalizeClass(["card", computedClasses.value])
      }, {
        default: withCtx(() => [
          createVNode(unref(ReusableImg).define, null, {
            default: withCtx(() => [
              renderSlot(_ctx.$slots, "img", {}, () => [
                unref(props).imgSrc ? (openBlock(), createBlock(_sfc_main$7, normalizeProps(mergeProps({ key: 0 }, imgAttr.value)), null, 16)) : createCommentVNode("", true)
              ])
            ]),
            _: 3
          }),
          unref(props).imgPlacement !== "bottom" ? (openBlock(), createBlock(unref(ReusableImg).reuse, { key: 0 })) : createCommentVNode("", true),
          unref(props).header || hasHeaderSlot.value ? (openBlock(), createBlock(_sfc_main$5, {
            key: 1,
            "bg-variant": unref(props).headerBgVariant,
            variant: unref(props).headerVariant,
            "border-variant": unref(props).headerBorderVariant,
            tag: unref(props).headerTag,
            "text-variant": unref(props).headerTextVariant,
            class: normalizeClass(unref(props).headerClass)
          }, {
            default: withCtx(() => [
              renderSlot(_ctx.$slots, "header", {}, () => [
                createTextVNode(toDisplayString(unref(props).header), 1)
              ])
            ]),
            _: 3
          }, 8, ["bg-variant", "variant", "border-variant", "tag", "text-variant", "class"])) : createCommentVNode("", true),
          !unref(props).noBody ? (openBlock(), createBlock(_sfc_main$2, {
            key: 2,
            overlay: unref(props).imgPlacement === "overlay",
            "bg-variant": unref(props).bodyBgVariant,
            tag: unref(props).bodyTag,
            "text-variant": unref(props).bodyTextVariant,
            subtitle: unref(props).subtitle,
            "subtitle-tag": unref(props).subtitleTag,
            "subtitle-text-variant": unref(props).subtitleTextVariant,
            title: unref(props).title,
            "title-tag": unref(props).titleTag,
            class: normalizeClass(unref(props).bodyClass)
          }, {
            default: withCtx(() => [
              renderSlot(_ctx.$slots, "default", {}, () => [
                createTextVNode(toDisplayString(unref(props).bodyText), 1)
              ])
            ]),
            _: 3
          }, 8, ["overlay", "bg-variant", "tag", "text-variant", "subtitle", "subtitle-tag", "subtitle-text-variant", "title", "title-tag", "class"])) : renderSlot(_ctx.$slots, "default", { key: 3 }, () => [
            createTextVNode(toDisplayString(unref(props).bodyText), 1)
          ]),
          unref(props).footer || hasFooterSlot.value ? (openBlock(), createBlock(_sfc_main$1, {
            key: 4,
            "bg-variant": unref(props).footerBgVariant,
            "border-variant": unref(props).footerBorderVariant,
            variant: unref(props).footerVariant,
            tag: unref(props).footerTag,
            "text-variant": unref(props).footerTextVariant,
            class: normalizeClass(unref(props).footerClass)
          }, {
            default: withCtx(() => [
              renderSlot(_ctx.$slots, "footer", {}, () => [
                createTextVNode(toDisplayString(unref(props).footer), 1)
              ])
            ]),
            _: 3
          }, 8, ["bg-variant", "border-variant", "variant", "tag", "text-variant", "class"])) : createCommentVNode("", true),
          unref(props).imgPlacement === "bottom" ? (openBlock(), createBlock(unref(ReusableImg).reuse, { key: 5 })) : createCommentVNode("", true)
        ]),
        _: 3
      }, 8, ["class"]);
    };
  }
});

// node_modules/bootstrap-vue-next/dist/BCardText.vue_vue_type_script_setup_true_lang-DdqzUfNr.mjs
var _sfc_main$12 = defineComponent({
  __name: "BCardGroup",
  props: {
    columns: { type: Boolean, default: false },
    deck: { type: Boolean, default: false },
    tag: { default: "div" }
  },
  setup(__props) {
    const _props = __props;
    const props = useDefaults(_props, "BCardGroup");
    const cardTypeClass = computed(
      () => props.deck ? "card-deck" : props.columns ? "card-columns" : "card-group"
    );
    return (_ctx, _cache) => {
      return openBlock(), createBlock(resolveDynamicComponent(unref(props).tag), {
        class: normalizeClass(cardTypeClass.value)
      }, {
        default: withCtx(() => [
          renderSlot(_ctx.$slots, "default")
        ]),
        _: 3
      }, 8, ["class"]);
    };
  }
});
var _sfc_main3 = defineComponent({
  __name: "BCardText",
  props: {
    tag: { default: "p" },
    text: { default: void 0 }
  },
  setup(__props) {
    const _props = __props;
    const props = useDefaults(_props, "BCardText");
    return (_ctx, _cache) => {
      return openBlock(), createBlock(resolveDynamicComponent(unref(props).tag), { class: "card-text" }, {
        default: withCtx(() => [
          renderSlot(_ctx.$slots, "default", {}, () => [
            createTextVNode(toDisplayString(unref(props).text), 1)
          ])
        ]),
        _: 3
      });
    };
  }
});
export {
  _sfc_main2 as BCard,
  _sfc_main$2 as BCardBody,
  _sfc_main$1 as BCardFooter,
  _sfc_main$12 as BCardGroup,
  _sfc_main$5 as BCardHeader,
  _sfc_main$7 as BCardImg,
  _sfc_main$3 as BCardSubtitle,
  _sfc_main3 as BCardText,
  _sfc_main$4 as BCardTitle
};
//# sourceMappingURL=bootstrap-vue-next_components_BCard.js.map
